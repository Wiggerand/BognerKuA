www.netacad.com

Chapter1
Ein Alias ist ein Befehl z.B. 
alias mycal="cal 2016"
mit "mycal" wird in dem Fall der Kalender von 2016 angezeigt in der Konsole

app/assets/application.css
*= require foundation

views/layouts/application.html.erb
<%= javascript_include_tag "vendor/modernizr" %>
<%= render 'layouts/top_bar' %> über yield


Layouts/topbar:
<div class="top-bar">
<div class="top-bar-left">
<ul class="dropdown menu" data-dropdown-menu>
<li class="menu-text">Site Title</li>
<li>
<a href="#">One</a>
<ul class="menu vertical">
<li><a href="#">One</a></li>
<li><a href="#">Two</a></li>
<li><a href="#">Three</a></li>
</ul>
</li>
<li><a href="#">Two</a></li>
<li><a href="#">Three</a></li>
</ul>
</div>
<div class="top-bar-right">
<ul class="menu">
<li><input type="search" placeholder="Search"></li>
<li><button type="button" class="button">Search</button></li>
</ul>
</div>
</div>

6.
rails g scaffold quality:integer book:references
models/book.rb		
	class Book < ApplicationRecord
	has_many :likes, :dependent => :destroy
end	 hinzufügen
in der routes.rb abändern
Rails.application.routes.draw do
  
  root "books#index"
  resources :books do 
  	resources :likes
  end
In der views/books/index.html.erb 
<td><%= link_to 'Likes', book_likes_path(book.id) %></td> einfügen als link

In der likes _form.html.erb muss das hinzugeführt werden
<%= form_for([@book, @like]) do |f| %>
Controller anpassen:
likes_controller.rb im private bereich hinzufügen
def set_book
      @book = Book.find(params[:book_id])
    end
before_action :set_book		hinzufügen
ändern
def index
    @likes = @book.like
  end
def new
    @like = @book.likes.new
  end
In der models/book.rb
class Book < ApplicationRecord
	has_many :likes, :dependent => :destroy
end		hinzufügen.
Im Likes_controller.rb Zeile 31 ändern von 
def create
format.html { redirect_to @like, notice: 'Like was successfully created.' }
        in
format.html { redirect_to book_like_path(@book.id, @like.id), notice: 'Like was successfully created.' }		ändern
sowie def destroy
format.html { redirect_to book_likes_url(@book.id),
In der likes/new.html.erb erweitern
<%= link_to 'Back', book_likes_path(@book.id) %>



like.rb muss belongs_to :book 		beinhalten

rake db:migrate
routes.rb

Im controller/likes_controller






e = Book.new
e.title = „Bogner“
e.save
oder
e = Book.create(title: „kjk“, author: „kjsdk“)

e = book.last
e.likes.create(quality: 23)

rails g migration Add_Field_To_Likes description:text		spalte hinzufügen
rails g migration ChangeTableLike









































1. Erstellen Sie eine Applikation books.

rails new books

2. Nutzen Sie für diese Applikation das CSS-Framework Foundation.

gem 'foundation-rails'
bundle install
rails g foundation:install
Y

3. Erstellen Sie eine Resource books mit den Spalten: author, title, description (text), published_on (Date)

rails g scaffold books author:string title:string description:text published_on:date

rake db:migrate

4. Stellen Sie sicher, dass beim Aufruf der Seite die index-Action der Resource Books aufgerufen wird.

config/routes.rb

root 'books#index'

5. Binden Sie die topbar ein. Erstellen Sie einen Link in der Navigationsleiste, der auf die Index-Seite verweist.

<%= render 'layouts/top_bar' %>

<li><a href="http://localhost:3000/">Books</a></li>

6. Erstellen Sie eine untergeordnete Resource Likes, die eine Spalte quality (integer) hat. Sichern Sie ab, dass ein Like immer einem Book-Objekt zugeordnet ist.

rails g scaffold likes quality:integer


config/routes.rb

resources :books do
resources :likes
end

-----------------------------------------------------------------------------------
ÄNDERN:
controllers/likes_controller.rb

models/book.rb -> has_many :likes
models/like.rb -> belongs_to :book
views/books/index -> ... 'Like', book_likes_path(book) %></td>
ZEILE 1 views/likes/_form -> <%= form_for([@book, @like]) do |f| %>
views/likes/edit -> ... 'Show', book_like_path(@book.id, @like.id) %>
... 'Back', book_likes_path(@book.id) %>
views/likes/index -> ... 'Show', book_like_path(@book.id, like.id) %>
... 'Edit', edit_book_like_path(@book.id, like.id) %>
... 'Destroy', book_like_path(@book.id, like.id)
... 'New Like', new_book_like_path %>
views/likes/new -> ... 'Back', new_book_like_path %>
views/likes/show -> ... 'Edit', edit_book_like_path(@like) %> 
... 'Back', book_likes_path %>
db/migrate/create_likes -> t.integer :book_id 
------------------------------------------------------------------------------------

rake db:migrate

7. Stellen Sie sicher, dass der Benutzer bei der Neuanlage/Update eines Likes eine Zahl von 1 bis 5 eingeben muss. Ansonsten wird das Formular nicht gespeichert.

HOW_HEARD_OPTIONS = [ 
1, 2, 3, 4, 5 
] 

validates :quality, inclusion: { in: HOW_HEARD_OPTIONS }

8. Erstellen Sie einen View-Helper, der für ein Book-Objekt den Durchschnitt aller Likes für dieses Objekt errechnet und auf der Book-Show-Seite ausgibt.

app/helpers/book_helper.rb

def durchschnitt(book)

i=0 

book.likes.each do |f| 
i=i+f.quality 
end 

e=i/book.likes.count 
end 


app/views/books/show

<p>
<strong>Durchschnitt der Likes:</strong>
<%= durchschnitt(@book) %>
</p>
